{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SideID_",
				"SideID_start"
			],
			[
				"Finish",
				"FinishExchangeMPIData"
			],
			[
				"MPIR",
				"MPIRequest_U"
			],
			[
				"WallElem",
				"WallElemID"
			],
			[
				"BcSide",
				"BCSideToWMLES"
			],
			[
				"MasterToOpp",
				"MasterToOppSide"
			],
			[
				"OtherElem",
				"OthersElemInfo"
			],
			[
				"nTauW",
				"nTauW_MINE_FacePoint"
			],
			[
				"gradU",
				"gradUy_master"
			],
			[
				"WallToB",
				"WallToBCSide"
			],
			[
				"Interior",
				"InteriorToLocalPoint"
			],
			[
				"Newton",
				"NewtonLogLaw"
			],
			[
				"MOD_WMLES",
				"MOD_WMLES_Vars"
			],
			[
				"Int",
				"InteriorToLocalPoint"
			],
			[
				"Interpola",
				"InterpolateHwm"
			],
			[
				"Interpo",
				"InterpolateHwm"
			],
			[
				"Lag_",
				"Lag_xi"
			],
			[
				"nTau",
				"nTauW_MINE_Interpolate"
			],
			[
				"nT",
				"nTauW_MINE_Interpolate"
			],
			[
				"nTauW_MINE_Inte",
				"nTauW_MINE_Interpolate"
			],
			[
				"nPro",
				"nProcessors-1"
			],
			[
				"sendRe",
				"sendRequest"
			],
			[
				"COMM",
				"MPI_COMM_FLEXI"
			],
			[
				"TauW_MINE_Is",
				"TauW_MINE_IsFace"
			],
			[
				"Glob_",
				"Glob_hwmElemID-1"
			],
			[
				"Other",
				"OthersElemInfo"
			],
			[
				"Proc_Re",
				"Proc_RecvTauW_Inv"
			],
			[
				"WMLES_Re",
				"WMLES_RecvRequests"
			],
			[
				"nPRocs",
				"nProcs_RecvTauW"
			],
			[
				"nTa",
				"nTauW_YOURS"
			],
			[
				"Dista",
				"Distance"
			],
			[
				"Face",
				"FaceToLocalPoint"
			],
			[
				"TauW_M",
				"TauW_MINE_FacePoint"
			],
			[
				"Proc",
				"Proc_SendTauW_tmp"
			],
			[
				"nTauW_MINE_Inter",
				"nTauW_MINE_InteriorPoint"
			],
			[
				"nProcs",
				"nProcs_SendTauW"
			],
			[
				"MOD_WMLE",
				"MOD_WMLES_Vars"
			],
			[
				"TauW_F",
				"TauW_MINE_IsFace"
			],
			[
				"MOD_MPI",
				"MOD_MPI_Vars"
			],
			[
				"E2S",
				"E2S_FLIP"
			],
			[
				"OppSi",
				"OppSideID"
			],
			[
				"WAllS",
				"WallStressCount_local"
			],
			[
				"Glob",
				"Glob_hwmElemID"
			],
			[
				"Foun",
				"FoundhwmPoint"
			],
			[
				"F",
				"FoundhwmPoint"
			],
			[
				"Dist",
				"DistanceFromPoint"
			],
			[
				"offs",
				"offsetElem"
			],
			[
				"Loc",
				"Loc_hwmElemID"
			],
			[
				"nTaw",
				"nTauW_RecvFromProc"
			],
			[
				"TauW_Re",
				"TauW_RecvFrom_tmp"
			],
			[
				"WallS",
				"WallStressCount_local"
			],
			[
				"GT",
				"GT"
			],
			[
				"wallS",
				"WallStressCount_local"
			],
			[
				"nPoin",
				"nPoints_MINE_tmp2"
			],
			[
				"nPoint",
				"nPoints_MINE_tmp"
			],
			[
				"MPI_RE",
				"MPI_REQUEST_NULL"
			],
			[
				"WMLESTo",
				"WMLESToBCSide"
			],
			[
				"WMLESToB",
				"WMLESToBCSide_tmp"
			],
			[
				"BCTo",
				"BCSideToWMLES"
			],
			[
				"hwm",
				"h_wm_Coords"
			],
			[
				"WMLESTO",
				"WMLESToBC_tmp"
			],
			[
				"GlobalSide",
				"GlobalOppSideID"
			],
			[
				"offsetElem",
				"offsetElemMPI"
			],
			[
				"offset",
				"offsetElemMPI"
			],
			[
				"S2E",
				"S2E_ELEM_ID"
			],
			[
				"UNIT_",
				"UNIT_stdOut"
			],
			[
				"Found",
				"FoundOrNomB"
			],
			[
				"hWM",
				"hwmElemID"
			],
			[
				"FindH",
				"FindHwmElementMPI"
			],
			[
				"Tau",
				"TauW_Element_MINE"
			],
			[
				"Distance",
				"DistanceVect"
			],
			[
				"tmpTa",
				"tmpTauW_FacexGP_MINE"
			],
			[
				"tmpT",
				"tmpTauW_NormVec_MINE"
			],
			[
				"h_wm",
				"h_wm_Coords"
			],
			[
				"tmpTaw",
				"tmpTauW_FacexGP_MINE"
			],
			[
				"abs",
				"abs_h_wm"
			],
			[
				"hwme",
				"hwmElemID"
			],
			[
				"hwmEle",
				"hwmElemID"
			],
			[
				"hwmEl",
				"hwmElemID"
			],
			[
				"Opposi",
				"OppositeSideID"
			],
			[
				"Oppo",
				"OppositeSideID"
			],
			[
				"LOG",
				"LOGWRITE"
			],
			[
				"tmpWM",
				"tmpWMLESToTSide_slave"
			],
			[
				"tmpWMLE",
				"tmpWMLESToTSide_master"
			],
			[
				"UPri",
				"UPrim_slave"
			],
			[
				"Uni",
				"UNIT_stdOut"
			],
			[
				"EvalDi",
				"EvalDiffFlux3D_WMLES"
			],
			[
				"Fin",
				"FinalizeWMLES"
			],
			[
				"Curren",
				"CurrentStage"
			],
			[
				"etaBR",
				"etaBR2_wall"
			],
			[
				"DefinePar",
				"DefinePametersWMLES"
			],
			[
				"Defin",
				"DefineParametersWMLES"
			]
		]
	},
	"buffers":
	[
		{
			"file": "flexi.f90",
			"settings":
			{
				"buffer_size": 2105,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flexilib.f90",
			"settings":
			{
				"buffer_size": 11441,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "flexi.h",
			"settings":
			{
				"buffer_size": 4758,
				"line_ending": "Unix"
			}
		},
		{
			"file": "globals/globals.f90",
			"settings":
			{
				"buffer_size": 26688,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/wmles/wmles.f90",
			"settings":
			{
				"buffer_size": 31582,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/wmles/wmles_vars.f90",
			"settings":
			{
				"buffer_size": 10783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/channel_fft.f90",
			"settings":
			{
				"buffer_size": 11226,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "output/output.f90",
			"settings":
			{
				"buffer_size": 28562,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/fft.f90",
			"settings":
			{
				"buffer_size": 35271,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/posti_visu.f90",
			"settings":
			{
				"buffer_size": 8962,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu.f90",
			"settings":
			{
				"buffer_size": 31189,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/readstate.f90",
			"settings":
			{
				"buffer_size": 13976,
				"line_ending": "Unix"
			}
		},
		{
			"file": "restart/restart.f90",
			"settings":
			{
				"buffer_size": 20955,
				"line_ending": "Unix"
			}
		},
		{
			"file": "io_hdf5/hdf5_output.f90",
			"settings":
			{
				"buffer_size": 52142,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/calc.f90",
			"settings":
			{
				"buffer_size": 31039,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/eos_posti.f90",
			"settings":
			{
				"buffer_size": 38690,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu_vars.f90",
			"settings":
			{
				"buffer_size": 15999,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/fft_vars.f90",
			"settings":
			{
				"buffer_size": 3472,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/parametriccoords.f90",
			"settings":
			{
				"buffer_size": 20777,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "!=================================================================================================================================\n! Copyright (c) 2010-2016  Prof. Claus-Dieter Munz\n! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.\n! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/\n!\n! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License\n! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n!\n! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty\n! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.\n!\n! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.\n!=================================================================================================================================\n#include \"flexi.h\"\n\n!==================================================================================================================================\n!> \\brief Computes the DGSEM spatial operator and updates residual Ut\n\n!> Contains the routines to\n!> - initialize and finalize the DG global variables and the DG basis\n!> - compute the DG spatial operators/residuals(Ut) using U from the volume, surface and source contribution, incl.\n!> lifting for the gradients and parallelization\n!==================================================================================================================================\nMODULE MOD_DG\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nIMPLICIT NONE\nPRIVATE\nSAVE\n!----------------------------------------------------------------------------------------------------------------------------------\n! GLOBAL VARIABLES\n!----------------------------------------------------------------------------------------------------------------------------------\n! Private Part --------------------------------------------------------------------------------------------------------------------\nINTERFACE FillIni\n  MODULE PROCEDURE FillIni\nEND INTERFACE\n\n\n! Public Part ----------------------------------------------------------------------------------------------------------------------\nINTERFACE InitDG\n  MODULE PROCEDURE InitDG\nEND INTERFACE\n\n\nINTERFACE DGTimeDerivative_weakForm\n  MODULE PROCEDURE DGTimeDerivative_weakForm\nEND INTERFACE\n\n\nINTERFACE FinalizeDG\n  MODULE PROCEDURE FinalizeDG\nEND INTERFACE\n\n\nPUBLIC::InitDG,DGTimeDerivative_weakForm,FinalizeDG\n!==================================================================================================================================\n\n\n\nCONTAINS\n\n!==================================================================================================================================\n!> Allocate all global DG variables like U (solution in volume), U_slave/U_master (solution on faces), Flux, Ut (DG time derivative),\n!> also fill the initial solution and call init DG basis. Operator building are also initialized by calling InitDGBasis.\n!==================================================================================================================================\nSUBROUTINE InitDG()\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nUSE MOD_Globals\nUSE MOD_PreProc\nUSE MOD_DG_Vars\nUSE MOD_Interpolation_Vars,   ONLY: xGP,wGP,L_minus,L_plus\nUSE MOD_Interpolation_Vars,   ONLY: InterpolationInitIsDone\nUSE MOD_Restart_Vars,         ONLY: DoRestart,RestartInitIsDone\nUSE MOD_Mesh_Vars,            ONLY: nElems,nSides,Elem_xGP,MeshInitIsDone\nUSE MOD_ChangeBasisByDim,     ONLY: ChangeBasisVolume\nIMPLICIT NONE\n!----------------------------------------------------------------------------------------------------------------------------------\n! INPUT/OUTPUT VARIABLES\n!----------------------------------------------------------------------------------------------------------------------------------\n! LOCAL VARIABLES\n!==================================================================================================================================\n\n! Check if all the necessary initialization is done before\nIF((.NOT.InterpolationInitIsDone).OR.(.NOT.MeshInitIsDone).OR.(.NOT.RestartInitIsDone).OR.DGInitIsDone)THEN\n  CALL CollectiveStop(__STAMP__,&\n    'InitDG not ready to be called or already called.')\nEND IF\nSWRITE(UNIT_StdOut,'(132(\"-\"))')\nSWRITE(UNIT_stdOut,'(A)') ' INIT DG...'\n\n! Pre-compute the dg operator building blocks (differentiation matrices and prolongation operators)\nCALL InitDGBasis(PP_N, xGP,wGP,L_minus,L_plus,D ,D_T ,D_Hat ,D_Hat_T ,L_HatMinus ,L_HatPlus)\n\n! Allocate the local DG solution (JU or U): element-based\nALLOCATE(U(        PP_nVar,0:PP_N,0:PP_N,0:PP_NZ,nElems))\n! Allocate the time derivative / solution update /residual vector dU/dt: element-based\nALLOCATE(Ut(PP_nVar,0:PP_N,0:PP_N,0:PP_NZ,nElems))\nU=0.\nUt=0.\n\n! Allocate the 2D solution vectors on the sides, one array for the data belonging to the proc (the master)\n! and one for the sides which belong to another proc (slaves): side-based\nALLOCATE(U_master(PP_nVar,0:PP_N,0:PP_NZ,1:nSides))\nALLOCATE(U_slave( PP_nVar,0:PP_N,0:PP_NZ,1:nSides))\nU_master=0.\nU_slave=0.\n\n! Repeat the U, U_Minus, U_Plus structure for the primitive quantities\nALLOCATE(UPrim(       PP_nVarPrim,0:PP_N,0:PP_N,0:PP_NZ,nElems))\nALLOCATE(UPrim_master(PP_nVarPrim,0:PP_N,0:PP_NZ,1:nSides))\nALLOCATE(UPrim_slave( PP_nVarPrim,0:PP_N,0:PP_NZ,1:nSides))\nUPrim=0.\nUPrim_master=0.\nUPrim_slave=0.\n\n! Allocate two fluxes per side (necessary for coupling of FV and DG)\nALLOCATE(Flux_master(PP_nVar,0:PP_N,0:PP_NZ,1:nSides))\nALLOCATE(Flux_slave (PP_nVar,0:PP_N,0:PP_NZ,1:nSides))\nFlux_master=0.\nFlux_slave=0.\n\n! variables for performance tricks\nnDOFElem=(PP_N+1)**PP_dim\nnTotalU=PP_nVar*nDOFElem*nElems\n\n! Fill the solution vector U with the initial solution by interpolation, if not filled through restart already\nIF(.NOT.DoRestart)THEN\n  CALL FillIni(PP_N,Elem_xGP,U)\nEND IF\n\nDGInitIsDone=.TRUE.\nSWRITE(UNIT_stdOut,'(A)')' INIT DG DONE!'\nSWRITE(UNIT_StdOut,'(132(\"-\"))')\nEND SUBROUTINE InitDG\n\n\n\n!==================================================================================================================================\n!> Allocate and initialize the building blocks for the DG operator: Differentiation matrices and prolongation operators\n!==================================================================================================================================\nSUBROUTINE InitDGbasis(N_in,xGP,wGP,L_Minus,L_Plus,D,D_T,D_Hat,D_Hat_T,L_HatMinus,L_HatPlus)\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nUSE MOD_Interpolation,    ONLY: GetNodesAndWeights\nUSE MOD_Basis,            ONLY: PolynomialDerivativeMatrix,LagrangeInterpolationPolys\n#ifdef SPLIT_DG\nUSE MOD_DG_Vars,          ONLY: DVolSurf ! Transpose of differentiation matrix used for calculating the strong form\n#endif /*SPLIT_DG*/\nIMPLICIT NONE\n!----------------------------------------------------------------------------------------------------------------------------------\n! INPUT/OUTPUT VARIABLES\nINTEGER,INTENT(IN)                             :: N_in                   !< Polynomial degree\nREAL,DIMENSION(0:N_in),INTENT(IN)              :: xGP                    !< Gauss/Gauss-Lobatto Nodes\nREAL,DIMENSION(0:N_in),INTENT(IN)              :: wGP                    !< Gauss/Gauss-Lobatto Weights\nREAL,DIMENSION(0:N_in),INTENT(IN)              :: L_Minus                !< Values of lagrange polynomials at \\f$ \\xi = -1 \\f$\nREAL,DIMENSION(0:N_in),INTENT(IN)              :: L_Plus                 !< Values of lagrange polynomials at \\f$ \\xi = +1 \\f$\nREAL,ALLOCATABLE,DIMENSION(:,:),INTENT(OUT)    :: D                      !< Differentation matrix\nREAL,ALLOCATABLE,DIMENSION(:,:),INTENT(OUT)    :: D_T                    !< Transpose of differentation matrix\nREAL,ALLOCATABLE,DIMENSION(:,:),INTENT(OUT)    :: D_Hat                  !< Differentiation matrix premultiplied by mass matrix,\n                                                                         !< \\f$ \\hat{D} = M^{-1} D^T M \\f$\nREAL,ALLOCATABLE,DIMENSION(:,:),INTENT(OUT)    :: D_Hat_T                !< Transpose of D_Hat matrix \\f$ \\hat{D}^T \\f$\nREAL,ALLOCATABLE,DIMENSION(:)  ,INTENT(OUT)    :: L_HatMinus             !< Values of lagrange polynomials at \\f$ \\xi = -1 \\f$\n                                                                         !< premultiplied with mass matrix\nREAL,ALLOCATABLE,DIMENSION(:)  ,INTENT(OUT)    :: L_HatPlus              !< Values of lagrange polynomials at \\f$ \\xi = +1 \\f$\n                                                                         !< premultiplied with mass matrix\n!----------------------------------------------------------------------------------------------------------------------------------\n! LOCAL VARIABLES\nREAL,DIMENSION(0:N_in,0:N_in)              :: M,Minv\nINTEGER                                    :: iMass\n!==================================================================================================================================\n\nALLOCATE(L_HatMinus(0:N_in), L_HatPlus(0:N_in))\nALLOCATE(D(    0:N_in,0:N_in), D_T(    0:N_in,0:N_in))\nALLOCATE(D_Hat(0:N_in,0:N_in), D_Hat_T(0:N_in,0:N_in))\n! Compute Differentiation matrix D for given Gausspoints\nCALL PolynomialDerivativeMatrix(N_in,xGP,D)\nD_T=TRANSPOSE(D)\n\n! Build D_Hat matrix. D^ = - (M^(-1) * D^T * M)\nM=0.\nMinv=0.\nDO iMass=0,N_in\n  M(iMass,iMass)=wGP(iMass)\n  Minv(iMass,iMass)=1./wGP(iMass)\nEND DO\nD_Hat  = -MATMUL(Minv,MATMUL(TRANSPOSE(D),M))\nD_Hat_T= TRANSPOSE(D_hat)\n\n#ifdef SPLIT_DG\n! Use a modified D matrix for the strong form volume integral, that incorporates the inner fluxes that are subtracted from the\n! surfaces\nALLOCATE(DVolSurf(0:N_in,0:N_in))\nDVolSurf = D_T\n! Modify the D matrix here, the integral over the inner fluxes at the boundaries will then be automatically done in the volume\n! integral. The factor 1/2 is needed since we incorporate a factor of 2 in the split fluxes themselves!\nDVolSurf(0,0) = DVolSurf(0,0) + 1.0/(2.0 * wGP(0))\nDVolSurf(N_in,N_in) = DVolSurf(N_in,N_in) - 1.0/(2.0 * wGP(N_in))\n#endif /*SPLIT_DG*/\n\n! interpolate to left and right face (1 and -1 in reference space) and pre-divide by mass matrix\nL_HatPlus  = MATMUL(Minv,L_Plus)\nL_HatMinus = MATMUL(Minv,L_Minus)\nEND SUBROUTINE InitDGbasis\n\n\n\n!==================================================================================================================================\n!> \\brief Computes the residual Ut = \\f$ \\frac {d\\vec{U}} {dt} \\f$ from the current solution U employing the DG method.\n!> Computes the weak DGSEM space operator from surface, volume and source contributions. To do this we need to:\n!> - Prolong the solution from the volume to the interface\n!> - Invoke the lifting operator to calculate the gradients\n!> - Perform the volume integral\n!> - Perform the surface integral\n!> - If needed, add source terms to the residual\n!==================================================================================================================================\nSUBROUTINE DGTimeDerivative_weakForm(t)\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nUSE MOD_Globals\nUSE MOD_Preproc\nUSE MOD_Vector\nUSE MOD_DG_Vars             ,ONLY: Ut,U,U_slave,U_master,Flux_master,Flux_slave,L_HatPlus,L_HatMinus\nUSE MOD_DG_Vars             ,ONLY: UPrim,UPrim_master,UPrim_slave\nUSE MOD_DG_Vars,             ONLY: nTotalU\nUSE MOD_VolInt\nUSE MOD_SurfIntCons         ,ONLY: SurfIntCons\nUSE MOD_ProlongToFaceCons   ,ONLY: ProlongToFaceCons\nUSE MOD_FillFlux            ,ONLY: FillFlux\nUSE MOD_ApplyJacobianCons   ,ONLY: ApplyJacobianCons\nUSE MOD_Interpolation_Vars  ,ONLY: L_Minus,L_Plus\nUSE MOD_Overintegration_Vars,ONLY: OverintegrationType\nUSE MOD_Overintegration,     ONLY: Overintegration\nUSE MOD_ChangeBasisByDim    ,ONLY: ChangeBasisVolume\nUSE MOD_Testcase            ,ONLY: TestcaseSource\nUSE MOD_Testcase_Vars       ,ONLY: doTCSource\nUSE MOD_Equation            ,ONLY: GetPrimitiveStateSurface,GetConservativeStateSurface\nUSE MOD_EOS                 ,ONLY: ConsToPrim\nUSE MOD_Exactfunc           ,ONLY: CalcSource\nUSE MOD_Equation_Vars       ,ONLY: doCalcSource\nUSE MOD_Sponge              ,ONLY: Sponge\nUSE MOD_Sponge_Vars         ,ONLY: doSponge\nUSE MOD_Filter              ,ONLY: Filter_Pointer\nUSE MOD_Filter_Vars         ,ONLY: FilterType,FilterMat\nUSE MOD_FillMortarCons      ,ONLY: U_MortarCons,Flux_MortarCons\nUSE MOD_FillMortarPrim      ,ONLY: U_MortarPrim\n#if PARABOLIC\nUSE MOD_Lifting             ,ONLY: Lifting\nUSE MOD_Lifting_Vars\n#endif /*PARABOLIC*/\n#if USE_MPI\nUSE MOD_MPI_Vars\nUSE MOD_MPI                 ,ONLY: StartReceiveMPIData,StartSendMPIData,FinishExchangeMPIData\nUSE MOD_Mesh_Vars,           ONLY: nSides\n#endif /*USE_MPI*/\n#if FV_ENABLED\nUSE MOD_FV_Vars             ,ONLY: FV_Elems_master,FV_Elems_slave,FV_Elems_Sum\nUSE MOD_FV_Mortar           ,ONLY: FV_Elems_Mortar\nUSE MOD_FV                  ,ONLY: FV_DGtoFV\nUSE MOD_FV_VolInt           ,ONLY: FV_VolInt\n#if USE_MPI\nUSE MOD_MPI                 ,ONLY: StartExchange_FV_Elems\n#endif /*USE_MPI*/\n#if FV_RECONSTRUCT\nUSE MOD_FV_Vars             ,ONLY: gradUxi,gradUeta,gradUzeta\n#if PARABOLIC\nUSE MOD_FV_Vars             ,ONLY: gradUxi_central,gradUeta_central,gradUzeta_central\n#endif\nUSE MOD_FV_Vars             ,ONLY: FV_surf_gradU,FV_multi_master,FV_multi_slave\nUSE MOD_FV_ProlongToFace    ,ONLY: FV_ProlongToDGFace\nUSE MOD_FV_Mortar           ,ONLY: FV_gradU_mortar\nUSE MOD_FV_Reconstruction   ,ONLY: FV_PrepareSurfGradient,FV_SurfCalcGradients,FV_SurfCalcGradients_BC,FV_CalcGradients\n#endif /* FV_RECONSTRUCT */\n#endif /* FV_ENABLED */\n#if EDDYVISCOSITY\nUSE MOD_EddyVisc_Vars       ,ONLY: ComputeEddyViscosity, muSGS, muSGS_master, muSGS_slave\nUSE MOD_ProlongToFace       ,ONLY: ProlongToFace\nUSE MOD_TimeDisc_Vars       ,ONLY: CurrentStage\n#endif\n#if WMLES\nUSE MOD_WMLES               ,ONLY: ComputeWallStress\n#if !EDDYVISCOSITY\nUSE MOD_TimeDisc_Vars       ,ONLY: CurrentStage\n#endif\n#endif\nIMPLICIT NONE\n!----------------------------------------------------------------------------------------------------------------------------------\n! INPUT/OUTPUT VARIABLES\nREAL,INTENT(IN)                 :: t                      !< Current time\n!----------------------------------------------------------------------------------------------------------------------------------\n! LOCAL VARIABLES\n!==================================================================================================================================\n\n! -----------------------------------------------------------------------------\n! MAIN STEPS        []=FV only\n! -----------------------------------------------------------------------------\n! 1.  Filter solution vector\n! 2.  Convert volume solution to primitive\n! 3.  Prolong to face (fill U_master/slave)\n! 4.  ConsToPrim of face data (U_master/slave)\n![5.] Second order reconstruction for FV\n! 6.  Lifting\n! 7.  Volume integral (DG only)\n![8.] FV volume integral\n! 9.  IF EDDYVISCOSITY: Prolong muSGS to face and send from slave to master\n! 10. Fill flux (Riemann solver) + surface integral\n! 11. Ut = -Ut\n! 12. Sponge and source terms\n! 13. Perform overintegration and apply Jacobian\n! -----------------------------------------------------------------------------\n\n! (0. Nullify arrays)\n! NOTE: UT and U are nullified in DGInit, and Ut is set directly in the volume integral, so in this implementation,\n!       ARRAYS DO NOT NEED TO BE NULLIFIED, OTHERWISE THEY HAVE TO!\n! CALL VNullify(nTotalU,Ut)\n\n! 1. Filter the solution vector if applicable, filter_pointer points to cut-off filter or LAF filter (see filter.f90)\nIF(FilterType.GT.0) CALL Filter_Pointer(U,FilterMat)\n\n! 2. Convert Volume solution to primitive\nCALL ConsToPrim(PP_N,UPrim,U)\n\n! 3. Prolong the solution to the face integration points for flux computation (and do overlapping communication)\n! -----------------------------------------------------------------------------------------------------------\n! General idea: The slave sends its surface data to the master, where the flux is computed and sent back to the slaves.\n! Steps:\n! * (these steps are done for all slave MPI sides first and then for all remaining sides):\n! 3.1)  Prolong solution to faces and store in U_master/slave. Use them to build mortar data (split into 2/4 smaller sides).\n!       Then U_slave can be communicated from the slave to master MPI side.\n![3.2)] The information which element is a DG or FV subcells element is stored in FV_Elems per element. To know which of the\n!       data inside the face-arrays U_master/slave is DG or FV the FV_Elems is 'prolongated' (copied) to FV_Elems_master/slave.\n!       These directly correspond to U_master/slave and must be handled in the same way as U_master/slave. Therefore they are\n!       'mortarized' and then FV_Elems_slave is transmitted like U_slave.\n![3.3)] The reconstruction of slopes over element interfaces requires, besides U_slave and FV_Elems_slave, some more\n!       information that has to be transmitted from the slave to the master MPI side (same direction as U_slave and\n!       FV_Elems_slave), which does the whole flux computation.\n!       This additional data is different for the two the element types (DG or FV) and is stored in the multipurpose array\n!       FV_multi_master/slave.\n! 3.4)  Finish all started MPI communications (after step 2. due to latency hiding)\n\n#if USE_MPI\n! Step 3 for all slave MPI sides\n! 3.1)\nCALL StartReceiveMPIData(U_slave,DataSizeSide,1,nSides,MPIRequest_U(:,SEND),SendID=2) ! Receive MINE / U_slave: slave -> master\nCALL ProlongToFaceCons(PP_N,U,U_master,U_slave,L_Minus,L_Plus,doMPISides=.TRUE.)\nCALL U_MortarCons(U_master,U_slave,doMPISides=.TRUE.)\nCALL StartSendMPIData(   U_slave,DataSizeSide,1,nSides,MPIRequest_U(:,RECV),SendID=2) ! SEND YOUR / U_slave: slave -> master\n#if FV_ENABLED\n! 3.2)\nCALL FV_Elems_Mortar(FV_Elems_master,FV_Elems_slave,doMPISides=.TRUE.)\nCALL StartExchange_FV_Elems(FV_Elems_slave,1,nSides,MPIRequest_FV_Elems(:,SEND),MPIRequest_FV_Elems(:,RECV),SendID=2)\n                                                                 ! Receive MINE, Send YOUR / FV_Elems_slave: slave -> master\n#if FV_RECONSTRUCT\n! 3.3)\nCALL StartReceiveMPIData(FV_multi_slave,DataSizeSidePrim,1,nSides,MPIRequest_FV_gradU(:,SEND),SendID=2)\n                                                                 ! Receive MINE / FV_multi_slave: slave -> master\nCALL FV_PrepareSurfGradient(UPrim,FV_multi_master,FV_multi_slave,doMPiSides=.TRUE.)\nCALL U_MortarPrim(FV_multi_master,FV_multi_slave,doMPiSides=.TRUE.)\nCALL StartSendMPIData(   FV_multi_slave,DataSizeSidePrim,1,nSides,MPIRequest_FV_gradU(:,RECV),SendID=2)\n                                                                 ! SEND YOUR / FV_multi_slave: slave -> master\n#endif /* FV_RECONSTRUCT */\n#endif /* FV_ENABLED */\n#endif /*USE_MPI*/\n\n! Step 3 for all remaining sides\n! 3.1)\nCALL ProlongToFaceCons(PP_N,U,U_master,U_slave,L_Minus,L_Plus,doMPISides=.FALSE.)\nCALL U_MortarCons(U_master,U_slave,doMPISides=.FALSE.)\n#if FV_ENABLED\n! 3.2)\nCALL FV_Elems_Mortar(FV_Elems_master,FV_Elems_slave,doMPISides=.FALSE.)\n#if FV_RECONSTRUCT\n! 3.3)\nCALL FV_PrepareSurfGradient(UPrim,FV_multi_master,FV_multi_slave,doMPiSides=.FALSE.)\nCALL U_MortarPrim(FV_multi_master,FV_multi_slave,doMPiSides=.FALSE.)\n#endif\n#endif\n\n#if USE_MPI\n! 3.4) complete send / receive of side data from step 3.\nCALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_U)        ! U_slave: slave -> master\n#if FV_ENABLED\nCALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_FV_Elems) ! FV_Elems_slave: slave -> master\n#if FV_RECONSTRUCT\nCALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_FV_gradU) ! FV_multi_slave: slave -> master\n#endif\n#endif\n#endif\n\n! 4. Convert face data from conservative to primitive variables\n!    Attention: For FV with 2nd order reconstruction U_master/slave and therewith UPrim_master/slave are still only 1st order\n! TODO: Linadv?\nCALL GetPrimitiveStateSurface(U_master,U_slave,UPrim_master,UPrim_slave)\n#if FV_ENABLED\n! Build four-states-array for the 4 different combinations DG/DG(0), FV/DG(1), DG/FV(2) and FV/FV(3) a face can be.\nFV_Elems_Sum = FV_Elems_master + 2*FV_Elems_slave\n#endif\n\n#if FV_ENABLED && FV_RECONSTRUCT\n! [ 5. Second order reconstruction (computation of slopes) ]\n!-------------------------------------------------------\n! General idea at the faces: With the slave data from step 3.) reconstruct the slope over the interface on the master side\n!    and send it back to the slave\n! Steps:\n! * (steps 5.2 and 5.4 are done for all master MPI sides first and then for all remaining sides)\n! 5.1) Convert FV_multi_master/slave (only the DG parts of it) from DG nodes to FV nodes (equidistant)\n! 5.2) Reconstruct the slope over the interface (and send it from master to slave)\n! 5.3) On the slave side combine the slopes from the 2/4 small mortar sides to the big mortar side (when communication finished)\n! 5.4) Calculate slopes at boundary conditions\n! 5.5) Use the slope to prolongate the solution to UPrim_master/slave (ATTENTION: U_master/slave are only 1st order!)\n! 5.6) Calculate the inner (volume) slopes\n\n! 5.1)\nCALL FV_DGtoFV(PP_nVarPrim,FV_multi_master,FV_multi_slave)\n\n#if USE_MPI\n! 5.2)\nCALL StartReceiveMPIData(FV_surf_gradU,DataSizeSidePrim,1,nSides,MPIRequest_Flux(:,SEND),SendID=1)\n                                                         ! Receive YOUR / FV_surf_gradU: master -> slave\nCALL FV_SurfCalcGradients(UPrim_master,UPrim_slave,FV_multi_master,FV_multi_slave,&\n    FV_surf_gradU,doMPISides=.TRUE.)\nCALL StartSendMPIData(   FV_surf_gradU,DataSizeSidePrim,1,nSides,MPIRequest_Flux(:,RECV),SendID=1)\n                                                         ! Send MINE  /   FV_surf_gradU: master -> slave\n! 5.4)\nCALL FV_ProlongToDGFace(UPrim_master,UPrim_slave,FV_multi_master,FV_multi_slave,FV_surf_gradU,doMPISides=.TRUE.)\n#endif /*USE_MPI*/\n\n! Calculate FV-Gradients over inner Sides\n! 5.2)\nCALL FV_SurfCalcGradients(UPrim_master,UPrim_slave,FV_multi_master,FV_multi_slave,&\n    FV_surf_gradU,doMPISides=.FALSE.)\n! 5.3)\nCALL FV_gradU_mortar(FV_surf_gradU,doMPISides=.FALSE.)\n#if USE_MPI\nCALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_Flux)   ! FV_surf_gradU: master -> slave\nCALL FV_gradU_mortar(FV_surf_gradU,doMPISides=.TRUE.)\n#endif\n! 5.4)\nCALL FV_SurfCalcGradients_BC(UPrim_master,FV_surf_gradU,t)\n! 5.5)\nCALL FV_ProlongToDGFace(UPrim_master,UPrim_slave,FV_multi_master,FV_multi_slave,FV_surf_gradU,doMPISides=.FALSE.)\n! 5.6)\nCALL FV_CalcGradients(UPrim,FV_surf_gradU,gradUxi,gradUeta,gradUzeta &\n#if PARABOLIC\n    ,gradUxi_central,gradUeta_central,gradUzeta_central &\n#endif\n    )\n#endif /* FV_ENABLED && FV_RECONSTRUCT */\n\n#if PARABOLIC\n! 6. Lifting\n! Compute the gradients using Lifting (BR1 scheme,BR2 scheme ...)\n! The communication of the gradients is initialized within the lifting routines\nCALL Lifting(UPrim,UPrim_master,UPrim_slave,t)\n\n#if EDDYVISCOSITY\n! 7. [ After the lifting we can now compute the eddy viscosity, which then has to be evaluated at the boundary. ]\n! 7.1) - [ Open receive channel ]\n! 7.2) - Compute SGS viscosity\n! 7.3).  Prolong muSGS to face and send from slave to master, first MPI sides then inner sides\n! 7.4) - After step 6. receive SGS data\nIF(CurrentStage.EQ.1) THEN\n#if USE_MPI\n  CALL StartReceiveMPIData(muSGS_slave,DataSizeSideSGS,1,nSides,MPIRequest_SGS(:,RECV),SendID=2)\n#endif\n  CALL ComputeEddyViscosity()\n#if USE_MPI\n  CALL ProlongToFace(1,PP_N,muSGS,muSGS_master,muSGS_slave,L_Minus,L_Plus,.TRUE.)\n  CALL StartSendMPIData   (muSGS_slave,DataSizeSideSGS,1,nSides,MPIRequest_SGS(:,SEND),SendID=2)\n#endif\n  CALL ProlongToFace(1,PP_N,muSGS,muSGS_master,muSGS_slave,L_Minus,L_Plus,.FALSE.)\nEND IF\n#endif /* EDDYVISCOSITY */\n\n#endif /*PARABOLIC*/\n\n! 8. Compute volume integral contribution and add to Ut\nCALL VolInt(Ut)\n\n#if FV_ENABLED\n! [ 9. Volume integral (advective and viscous) for all FV elements ]\nCALL FV_VolInt(UPrim,Ut)\n#endif\n\n#if PARABOLIC && USE_MPI\n#if EDDYVISCOSITY\nIF(CurrentStage.EQ.1) THEN\n  CALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_SGS)  ! muSGS_slave: slave -> master\nEND IF\n#endif /* EDDYVISCOSITY */\n! Complete send / receive for gradUx, gradUy, gradUz, started in the lifting routines\nCALL FinishExchangeMPIData(6*nNbProcs,MPIRequest_gradU) ! gradUx,y,z: slave -> master\n#endif /*PARABOLIC && USE_MPI*/\n\n\n! 10. Fill flux and Surface integral\n! General idea: U_master/slave and gradUx,y,z_master/slave are filled and can be used to compute the Riemann solver\n!               and viscous flux at the faces. This is done for the MPI master sides first, to start communication early\n!               and then for all other sides.\n!               At mixed DG/FV interfaces the flux is computed in FV points, therefore the DG part of the solution and gradients\n!               at mixed interfaces must be converted from DG to FV representation.\n!               After communication from master to slave the flux can be integrated over the faces.\n! Steps:\n! * (step 10.2 is done for all MPI master sides first and then for all remaining sides)\n! * (step 10.3 and 10.4 are done for all other sides first and then for the MPI master sides)\n![10.1)] Change basis of DG solution and gradients at mixed FV/DG interfaces to the FV grid\n![10.2)] Convert primitive face solution to conservative at FV faces\n! 10.3)  Fill flux (Riemann solver + viscous flux)\n! 10.4)  Combine fluxes from the 2/4 small mortar sides to the flux on the big mortar side (when communication finished)\n! 10.5)  Compute surface integral\n#if FV_ENABLED\n! 10.1)\n#if PARABOLIC\nCALL FV_DGtoFV(PP_nVarPrim,gradUx_master,gradUx_slave)\nCALL FV_DGtoFV(PP_nVarPrim,gradUy_master,gradUy_slave)\nCALL FV_DGtoFV(PP_nVarPrim,gradUz_master,gradUz_slave)\n#endif\nCALL FV_DGtoFV(PP_nVar    ,U_master     ,U_slave     )\nCALL FV_DGtoFV(PP_nVarPrim,UPrim_master ,UPrim_slave )\n! 10.2)\nCALL GetConservativeStateSurface(UPrim_master, UPrim_slave, U_master, U_slave, FV_Elems_master, FV_Elems_slave, 1)\n#endif\n\n#if USE_MPI\n! 10.3)\nCALL StartReceiveMPIData(Flux_slave, DataSizeSide, 1,nSides,MPIRequest_Flux( :,SEND),SendID=1)\n                                                                              ! Receive YOUR / Flux_slave: master -> slave\nCALL FillFlux(t,Flux_master,Flux_slave,U_master,U_slave,UPrim_master,UPrim_slave,doMPISides=.TRUE.)\nCALL StartSendMPIData(   Flux_slave, DataSizeSide, 1,nSides,MPIRequest_Flux( :,RECV),SendID=1)\n                                                                              ! Send MINE  /   Flux_slave: master -> slave\n#endif /*USE_MPI*/\n\n#if WMLES\n ! Before calling FillFlux for domain Boundary sides, the Wall Stress must be calculated.\n ! This step must be done here for two reasons:\n ! 1. Within FillFlux we only have Side information, whereas calculation of wall stresses need Volume information\n ! 2. We attempt to calculate it just for the first RK stage, as is done for the SGS model\nIF (CurrentStage .EQ. 1) THEN\n  ! Exchange information: master MPI procs now send their face data to slave MPI procs.\n  ! (Until now, only the other way around was done, i.e., slave to master prim. info exchange)\n  CALL StartSendMPIData(UPrim_master, DataSizeSidePrim, 1, nSides, MPIRequest_U(:,SEND), SendID=1)\n  CALL StartReceiveMPIData(UPrim_master, DataSizeSidePrim, 1, nSides, MPIRequest_U(:,RECV), SendID=1)\n  CALL FinishExchangeMPIData(2*nNbProcs, MPIRequest_U)\n  CALL ComputeWallStress() ! Populate wall stress tensor WMLES_Tauw\nEND IF\n#endif /* WMLES */\n\n! 10.3)\nCALL FillFlux(t,Flux_master,Flux_slave,U_master,U_slave,UPrim_master,UPrim_slave,doMPISides=.FALSE.)\n! 10.4)\nCALL Flux_MortarCons(Flux_master,Flux_slave,doMPISides=.FALSE.,weak=.TRUE.)\n! 10.5)\nCALL SurfIntCons(PP_N,Flux_master,Flux_slave,Ut,.FALSE.,L_HatMinus,L_hatPlus)\n\n#if USE_MPI\n! 10.4)\nCALL FinishExchangeMPIData(2*nNbProcs,MPIRequest_Flux )                       ! Flux_slave: master -> slave\nCALL Flux_MortarCons(Flux_master,Flux_slave,doMPISides=.TRUE.,weak=.TRUE.)\n! 10.5)\nCALL SurfIntCons(PP_N,Flux_master,Flux_slave,Ut,.TRUE.,L_HatMinus,L_HatPlus)\n#endif /*USE_MPI*/\n\n! 11. Swap to right sign :)\nUt=-Ut\n\n! 12. Compute source terms and sponge (in physical space, conversion to reference space inside routines)\nIF(doCalcSource) CALL CalcSource(Ut,t)\nIF(doSponge)     CALL Sponge(Ut)\nIF(doTCSource)   CALL TestcaseSource(Ut)\n\n! 13. Perform overintegration and apply Jacobian\n! Perform overintegration (projection filtering type overintegration)\nIF(OverintegrationType.GT.0) THEN\n  CALL Overintegration(Ut)\nEND IF\n! Apply Jacobian (for OverintegrationType==CUTOFFCONS this is already done within the Overintegration, but for DG only)\nIF (OverintegrationType.EQ.CUTOFFCONS) THEN\n#if FV_ENABLED\n  CALL ApplyJacobianCons(Ut,toPhysical=.TRUE.,FVE=1)\n#endif\nELSE\n  CALL ApplyJacobianCons(Ut,toPhysical=.TRUE.)\nEND IF\n\nEND SUBROUTINE DGTimeDerivative_weakForm\n\n\n\n!==================================================================================================================================\n!> Fills the solution array U with a initial solution provided by the ExactFunc subroutine though interpolation\n!==================================================================================================================================\nSUBROUTINE FillIni(Nloc,xGP,U)\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nUSE MOD_PreProc\nUSE MOD_Equation_Vars ,ONLY: IniExactFunc\nUSE MOD_Exactfunc     ,ONLY: ExactFunc\nUSE MOD_Mesh_Vars     ,ONLY: nElems\nIMPLICIT NONE\n!----------------------------------------------------------------------------------------------------------------------------------\n! INPUT/OUTPUT VARIABLES\nINTEGER,INTENT(IN)              :: Nloc                                    !< Polynomial degree of solution\nREAL,INTENT(IN)                 :: xGP(3,    0:Nloc,0:Nloc,0:ZDIM(Nloc),nElems)  !< Coordinates of Gauss-points\nREAL,INTENT(OUT)                :: U(PP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),nElems)  !< Solution array\n!----------------------------------------------------------------------------------------------------------------------------------\n! LOCAL VARIABLES\nINTEGER                         :: i,j,k,iElem\n!==================================================================================================================================\n\n! Evaluate the initial solution at the nodes and fill the solutin vector U.\nDO iElem=1,nElems\n  DO k=0,ZDIM(Nloc); DO j=0,Nloc; DO i=0,Nloc\n    CALL ExactFunc(IniExactFunc,0.,xGP(1:3,i,j,k,iElem),U(:,i,j,k,iElem))\n  END DO; END DO; END DO\nEND DO\nEND SUBROUTINE FillIni\n\n\n\n!==================================================================================================================================\n!> Finalizes global variables of the module.\n!> Deallocate allocatable arrays, nullify pointers, set *InitIsDone = .FALSE.\n!==================================================================================================================================\nSUBROUTINE FinalizeDG()\n!----------------------------------------------------------------------------------------------------------------------------------\n! MODULES\nUSE MOD_DG_Vars\nIMPLICIT NONE\n!----------------------------------------------------------------------------------------------------------------------------------\n! INPUT/OUTPUT VARIABLES\n!----------------------------------------------------------------------------------------------------------------------------------\n! LOCAL VARIABLES\n!==================================================================================================================================\nSDEALLOCATE(D)\nSDEALLOCATE(D_T)\nSDEALLOCATE(D_Hat)\nSDEALLOCATE(D_Hat_T)\n#if SPLIT_DG\nSDEALLOCATE(DVolSurf)\n#endif\nSDEALLOCATE(L_HatMinus)\nSDEALLOCATE(L_HatPlus)\nSDEALLOCATE(U)\nSDEALLOCATE(Ut)\nSDEALLOCATE(U_master)\nSDEALLOCATE(U_slave)\nSDEALLOCATE(Flux_master)\nSDEALLOCATE(Flux_slave)\nSDEALLOCATE(UPrim)\nSDEALLOCATE(UPrim_master)\nSDEALLOCATE(UPrim_slave)\nDGInitIsDone = .FALSE.\nEND SUBROUTINE FinalizeDG\n\n\nEND MODULE MOD_DG\n",
			"file": "dg/dg.f90",
			"file_size": 32567,
			"file_write_time": 132615129839495401,
			"settings":
			{
				"buffer_size": 32573,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/dg_vars.f90",
			"settings":
			{
				"buffer_size": 7199,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/fillflux.f90",
			"settings":
			{
				"buffer_size": 9345,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/getboundaryflux.f90",
			"settings":
			{
				"buffer_size": 59147,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/riemann.f90",
			"settings":
			{
				"buffer_size": 47152,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/flux.f90",
			"settings":
			{
				"buffer_size": 19094,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/eos.h",
			"settings":
			{
				"buffer_size": 4180,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/equation.f90",
			"settings":
			{
				"buffer_size": 14502,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/eos.f90",
			"settings":
			{
				"buffer_size": 17423,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/eos_vars.f90",
			"settings":
			{
				"buffer_size": 2018,
				"line_ending": "Unix"
			}
		},
		{
			"file": "timedisc/timedisc.f90",
			"settings":
			{
				"buffer_size": 25775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/calctimestep.f90",
			"settings":
			{
				"buffer_size": 9759,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/timeavg.f90",
			"settings":
			{
				"buffer_size": 21356,
				"line_ending": "Unix"
			}
		},
		{
			"file": "analyze/analyze.f90",
			"settings":
			{
				"buffer_size": 21056,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/analyze_equation.f90",
			"settings":
			{
				"buffer_size": 26112,
				"line_ending": "Unix"
			}
		},
		{
			"file": "equations/navierstokes/idealgas/exactfunc.f90",
			"settings":
			{
				"buffer_size": 34903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "readintools/readintools.f90",
			"settings":
			{
				"buffer_size": 68778,
				"line_ending": "Unix"
			}
		},
		{
			"file": "readintools/options.f90",
			"settings":
			{
				"buffer_size": 32484,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/br2/br2.f90",
			"settings":
			{
				"buffer_size": 17961,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/br2/br2_vars.f90",
			"settings":
			{
				"buffer_size": 4051,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/br2/br2_surfint.f90",
			"settings":
			{
				"buffer_size": 7866,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/br2/br2_volint.f90",
			"settings":
			{
				"buffer_size": 13766,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dg/br2/br2_fillflux.f90",
			"settings":
			{
				"buffer_size": 8516,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mpi/mpi.f90",
			"settings":
			{
				"buffer_size": 18847,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mpi/mpi_vars.f90",
			"settings":
			{
				"buffer_size": 5223,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/mesh.f90",
			"settings":
			{
				"buffer_size": 19669,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/mesh_vars.f90",
			"settings":
			{
				"buffer_size": 20852,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/prepare_mesh.f90",
			"settings":
			{
				"buffer_size": 45425,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/mesh_readin.f90",
			"settings":
			{
				"buffer_size": 36265,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/metrics.f90",
			"settings":
			{
				"buffer_size": 37886,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh/mappings.f90",
			"settings":
			{
				"buffer_size": 20833,
				"line_ending": "Unix"
			}
		},
		{
			"file": "io_hdf5/hdf5_input.f90",
			"settings":
			{
				"buffer_size": 30680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "io_hdf5/io_hdf5.f90",
			"settings":
			{
				"buffer_size": 20995,
				"line_ending": "Unix"
			}
		},
		{
			"file": "interpolation/changeBasis.f90",
			"settings":
			{
				"buffer_size": 4959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "testcase/channel/testcase.f90",
			"settings":
			{
				"buffer_size": 19145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "testcase/channel/testcase_vars.f90",
			"settings":
			{
				"buffer_size": 3194,
				"line_ending": "Unix"
			}
		},
		{
			"file": "testcase/default/testcase.f90",
			"settings":
			{
				"buffer_size": 17120,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "testcase/default/testcase_vars.f90",
			"settings":
			{
				"buffer_size": 2659,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"disco",
				"Discord Rich Presence: Connect to Discord"
			],
			[
				"disc",
				"Discord Rich Presence: Reconnect to Discord"
			],
			[
				"dis",
				"Discord Rich Presence: Disconnect"
			],
			[
				"discord",
				"Discord Rich Presence: Reconnect to Discord"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/eron/Workspace/CFD/Flexi/flexi/src",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/analyze",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/eddyVisc",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/eddyVisc/smagorinsky",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/filter",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/io_hdf5",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mpi",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/output",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/readintools",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/recordpoints",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/phill",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/timedisc",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu"
	],
	"file_history":
	[
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/eddyVisc/eddyVisc.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/eddyVisc/smagorinsky/smagorinsky.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/phill/testcase_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/phill/testcase.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/output/output_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/viscosity.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals/preprocessing.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/equation_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/interpolation.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/interpolation_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/br2/br2.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/mappings.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/eos_posti_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals/commandlinearguments.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/channel_fft.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/output/output.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/splitflux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/volint.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/default/testcase.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/readintools/readintools.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/rans_sa/idealgas/getboundaryflux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/filter/filter.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/overintegration.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/analyze_equation.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/analyze/analyze_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/timeavg.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/timedisc/timedisc.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/readintools/options.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/eos_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/eos.h",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/surfint.t90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/surfint.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/eos.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/br2/br2_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/equation.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/prolongtoface.t90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/prolongtoface.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/recordpoints/recordpoints.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/parametriccoords.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/rpset.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/preparerecordpoints.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/rpset_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/timedisc/timedisc_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals/vector.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/calctimestep.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/channel/testcase_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/testcase/channel/testcase.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/riemann.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/dg.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/hdf5_outputrp.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/parameters.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/recordpoints/recordpoints_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/basis.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/eos_posti.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/io_hdf5/io_hdf5.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/io_hdf5/hdf5_input.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/restart/restart.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/readstate.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/calc.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/posti_visu.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visumesh.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/converttovisu.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/changeBasis.t90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/changeBasis.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/readintools/stringtools.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/linearscalaradvection/flux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/linearscalaradvection/equation_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/wmles/wmles.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/mesh.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/mappings.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/mesh_readin.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/metrics.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/prepare_mesh.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mesh/mesh_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/wmles/wmles_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mpi/mpi.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mpi/mpi_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/exactfunc.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/fillflux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/flux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/br2/br2_surfint.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/br2/br2_volint.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/br2/br2_fillflux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/navierstokes/idealgas/getboundaryflux.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/sponge/sponge.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/io_hdf5/hdf5_output.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/interpolation/applyjacobian.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/analyze/analyze.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/readintools/isovaryingstring.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/flexi.h",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals/globals.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/flexilib.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/flexi.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/dg_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/fv/fv_metrics.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mortar/fillmortar.t90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mortar/fillmortar.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/dg/overintegration_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/equations/rans_sa/riemann.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/analyze/benchmarking.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/filter/filter_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/indicator/indicator.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mortar/mortar.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/mortar/mortar_vars.f90",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/output/read_userblock.c",
		"/home/eron/Workspace/CFD/Flexi/flexi/src/globals/stacksize.c",
		"/home/eron/Workspace/CFD/Flexi/runs/channel/Under-resolved/Re550/gnuplot_P3_40DOF.plt",
		"/home/eron/Workspace/CS/CSAPP/Chap3/PraticeProblems/pp3.26.c"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" WRITE",
			"WRITE",
			"WMLES",
			"lastMPISide_YOUR",
			"CALL Write",
			"Write",
			"Master",
			"ALLOCATE",
			"WMLES_TauW",
			"Face_xGP",
			"Master",
			"UPrim_Slave",
			"Master",
			"master",
			"Master",
			"master",
			"Master",
			"WMLESSide",
			"Master",
			"IntPInd",
			"TolVec",
			"WRITE",
			"FaceToLocal",
			"InterpToLocalPoint(IntPInd)",
			"InteriorToLocalPoint(IPInd)",
			"FaceToLocalPoint(FPInd)",
			"InterpToLocalPoint(IntPInd)",
			"InteriorToLocalPoint(IPInd)",
			"FaceToLocalPoint(FPInd)",
			"IntPInd",
			"IPInd",
			"FPInd",
			"LOGWRITE",
			"UNIT_logOut",
			"WMLES_SendRequests",
			"wmles_recvrequests",
			"Proc_RecvTauW_Inv",
			"Allocate",
			"deallocate",
			"InitOut",
			"InitOutput",
			"getreal",
			"filename",
			"CalcForcing",
			"cp",
			"UPrim",
			"Tang",
			"FPInd",
			"FaceToLocalPoint",
			"FPInd",
			"Tang",
			"WMLES",
			"WRITE",
			"hWmStd",
			"aRP%xi",
			"aRP%xF",
			"xRP",
			"SWRITE",
			"RPFound",
			"xRP",
			"XRP",
			"xRP",
			"aRP%xi",
			"RPFound",
			"maxTol",
			"GetParametricCoordinates",
			"ElemInfo",
			"_RECV",
			"FPInd",
			"FaceToLocalPoint",
			"offdist",
			"FPInd",
			"FacePoint",
			"i",
			"nTauW_MINE_Interpolate",
			"nTauW_MINE_InteriorPoint",
			"nTauW_MINE_FacePoint",
			"FindHwmElement",
			"OthersPointInfo",
			"OthersPointInfo(4",
			"WRITE",
			"A25",
			"A15",
			"FACE",
			"DO",
			"nProcessors",
			"InnerProduct_tmp",
			"TolTmp",
			"LocWMLES_Tol",
			"WMLES_Tol",
			"OppSideID",
			"SideID",
			"OppSideID",
			"nTauW_MINE",
			"WallStressProc",
			"WallStressProc_tmp",
			"nTauW_MINE_InElement",
			"nTauW_MINE_OnFace",
			"TauW_SendToProc",
			"Proc_RecvTauW",
			"TauW_SendTo_tmp",
			"TauW_RecvFrom_tmp",
			"TauW_RecvFromProc",
			"nTauW_SendToProc",
			"nTauW_RecvFromProc",
			"RecvFrom",
			"TauW_RecvFrom",
			"nTauW_RecvFrom",
			"nPoints_YOUR",
			"WallStressCount",
			"TODO",
			"Found",
			"GlobalOppSideID",
			"OppSideID",
			"ElemInfo",
			") h",
			") ",
			"WRITE(*,*)",
			"Loc_hwmElemID",
			"NodeCoords",
			"SideNodeCoords",
			"NodeCoords",
			"hwmElemID",
			"OppositeSide",
			"iElemID",
			"nMPISides",
			"MPISides",
			"nSides"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "flexi.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2105,
						"regions":
						{
						},
						"selection":
						[
							[
								1912,
								1912
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "flexilib.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11441,
						"regions":
						{
						},
						"selection":
						[
							[
								8310,
								8310
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2844.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "flexi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4758,
						"regions":
						{
						},
						"selection":
						[
							[
								4344,
								4344
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 906.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "globals/globals.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26688,
						"regions":
						{
						},
						"selection":
						[
							[
								4176,
								4176
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "equations/navierstokes/wmles/wmles.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31582,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6346.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "equations/navierstokes/wmles/wmles_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10783,
						"regions":
						{
						},
						"selection":
						[
							[
								3047,
								3047
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 454.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/channel_fft.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11226,
						"regions":
						{
						},
						"selection":
						[
							[
								9633,
								9633
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3405.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "output/output.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28562,
						"regions":
						{
						},
						"selection":
						[
							[
								24073,
								24073
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8481.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/fft.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35271,
						"regions":
						{
						},
						"selection":
						[
							[
								21476,
								21476
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7434.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/posti_visu.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8962,
						"regions":
						{
						},
						"selection":
						[
							[
								3784,
								3784
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1153.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31189,
						"regions":
						{
						},
						"selection":
						[
							[
								23338,
								23338
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8219.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/readstate.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13976,
						"regions":
						{
						},
						"selection":
						[
							[
								8909,
								8909
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2300.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "restart/restart.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20955,
						"regions":
						{
						},
						"selection":
						[
							[
								20883,
								20883
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3468.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "io_hdf5/hdf5_output.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52142,
						"regions":
						{
						},
						"selection":
						[
							[
								11161,
								11161
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4510.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/calc.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31039,
						"regions":
						{
						},
						"selection":
						[
							[
								3773,
								3773
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "equations/navierstokes/idealgas/eos_posti.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38690,
						"regions":
						{
						},
						"selection":
						[
							[
								28405,
								28405
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9454.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/visu/visu_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15999,
						"regions":
						{
						},
						"selection":
						[
							[
								2605,
								2605
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/channel_fft/fft_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3472,
						"regions":
						{
						},
						"selection":
						[
							[
								1951,
								1951
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/eron/Workspace/CFD/Flexi/flexi/posti/recordpoints/prepare/parametriccoords.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20777,
						"regions":
						{
						},
						"selection":
						[
							[
								4116,
								4116
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7038.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "dg/dg.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32573,
						"regions":
						{
						},
						"selection":
						[
							[
								27615,
								27615
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8706.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "dg/dg_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7199,
						"regions":
						{
						},
						"selection":
						[
							[
								3326,
								3326
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "dg/fillflux.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9345,
						"regions":
						{
						},
						"selection":
						[
							[
								8015,
								8015
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2130.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "equations/navierstokes/idealgas/getboundaryflux.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 59147,
						"regions":
						{
						},
						"selection":
						[
							[
								17631,
								17631
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10629.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "equations/navierstokes/riemann.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47152,
						"regions":
						{
						},
						"selection":
						[
							[
								14383,
								14383
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5734.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "equations/navierstokes/flux.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19094,
						"regions":
						{
						},
						"selection":
						[
							[
								9227,
								9227
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2853.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "equations/navierstokes/idealgas/eos.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4180,
						"regions":
						{
						},
						"selection":
						[
							[
								4172,
								4172
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 923.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "equations/navierstokes/equation.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14502,
						"regions":
						{
						},
						"selection":
						[
							[
								8422,
								8422
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3507.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "equations/navierstokes/idealgas/eos.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17423,
						"regions":
						{
						},
						"selection":
						[
							[
								17094,
								17094
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5241.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "equations/navierstokes/idealgas/eos_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2018,
						"regions":
						{
						},
						"selection":
						[
							[
								347,
								347
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "timedisc/timedisc.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25775,
						"regions":
						{
						},
						"selection":
						[
							[
								15863,
								15863
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5754.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "equations/navierstokes/calctimestep.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9759,
						"regions":
						{
						},
						"selection":
						[
							[
								7925,
								7925
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 957.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "equations/navierstokes/timeavg.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21356,
						"regions":
						{
						},
						"selection":
						[
							[
								11732,
								11732
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1344.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "analyze/analyze.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21056,
						"regions":
						{
						},
						"selection":
						[
							[
								6683,
								6683
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3221.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "equations/navierstokes/analyze_equation.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26112,
						"regions":
						{
						},
						"selection":
						[
							[
								24211,
								24211
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8787.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "equations/navierstokes/idealgas/exactfunc.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34903,
						"regions":
						{
						},
						"selection":
						[
							[
								9748,
								9748
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3269.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "readintools/readintools.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68778,
						"regions":
						{
						},
						"selection":
						[
							[
								6888,
								6888
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17404.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "readintools/options.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32484,
						"regions":
						{
						},
						"selection":
						[
							[
								25166,
								25166
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6797.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "dg/br2/br2.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17961,
						"regions":
						{
						},
						"selection":
						[
							[
								13507,
								13507
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3677.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "dg/br2/br2_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4051,
						"regions":
						{
						},
						"selection":
						[
							[
								2665,
								2665
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "dg/br2/br2_surfint.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7866,
						"regions":
						{
						},
						"selection":
						[
							[
								7159,
								7159
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 549.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "dg/br2/br2_volint.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13766,
						"regions":
						{
						},
						"selection":
						[
							[
								2334,
								2334
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 838.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "dg/br2/br2_fillflux.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8516,
						"regions":
						{
						},
						"selection":
						[
							[
								7829,
								7829
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1960.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "mpi/mpi.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18847,
						"regions":
						{
						},
						"selection":
						[
							[
								11268,
								11268
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4103.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "mpi/mpi_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5223,
						"regions":
						{
						},
						"selection":
						[
							[
								4251,
								4251
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "mesh/mesh.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19669,
						"regions":
						{
						},
						"selection":
						[
							[
								14622,
								14622
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "mesh/mesh_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20852,
						"regions":
						{
						},
						"selection":
						[
							[
								6483,
								6483
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "mesh/prepare_mesh.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45425,
						"regions":
						{
						},
						"selection":
						[
							[
								23578,
								23578
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7811.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "mesh/mesh_readin.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36265,
						"regions":
						{
						},
						"selection":
						[
							[
								2946,
								2946
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 205.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "mesh/metrics.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37886,
						"regions":
						{
						},
						"selection":
						[
							[
								29799,
								29799
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9563.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "mesh/mappings.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20833,
						"regions":
						{
						},
						"selection":
						[
							[
								6263,
								6263
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2104.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "io_hdf5/hdf5_input.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30680,
						"regions":
						{
						},
						"selection":
						[
							[
								24401,
								24401
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10171.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "io_hdf5/io_hdf5.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20995,
						"regions":
						{
						},
						"selection":
						[
							[
								9810,
								9810
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2878.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "interpolation/changeBasis.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4959,
						"regions":
						{
						},
						"selection":
						[
							[
								3224,
								3224
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 923.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "testcase/channel/testcase.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19145,
						"regions":
						{
						},
						"selection":
						[
							[
								5962,
								5962
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1028.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "testcase/channel/testcase_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3194,
						"regions":
						{
						},
						"selection":
						[
							[
								1927,
								1927
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "testcase/default/testcase.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17120,
						"regions":
						{
						},
						"selection":
						[
							[
								10532,
								10532
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3514.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "testcase/default/testcase_vars.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2659,
						"regions":
						{
						},
						"selection":
						[
							[
								2496,
								2496
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.43372901737,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "flexi-view.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 166.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
